/* $Id$ */

/*
 * This file is part of OpenTTD.
 * OpenTTD is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * OpenTTD is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with OpenTTD. If not, see <http://www.gnu.org/licenses/>.
 */

/* THIS FILE IS AUTO-GENERATED; PLEASE DO NOT ALTER MANUALLY */

#include "ai_industry.hpp"

namespace SQConvert {
	/* Allow AIIndustry to be used as Squirrel parameter */
	template <> AIIndustry *GetParam(ForceType<AIIndustry *>, HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, 0); return  (AIIndustry *)instance; }
	template <> AIIndustry &GetParam(ForceType<AIIndustry &>, HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, 0); return *(AIIndustry *)instance; }
	template <> const AIIndustry *GetParam(ForceType<const AIIndustry *>, HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, 0); return  (AIIndustry *)instance; }
	template <> const AIIndustry &GetParam(ForceType<const AIIndustry &>, HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, 0); return *(AIIndustry *)instance; }
	template <> int Return<AIIndustry *>(HSQUIRRELVM vm, AIIndustry *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "AIIndustry", res, NULL, DefSQDestructorCallback<AIIndustry>); return 1; }
} // namespace SQConvert

void SQAIIndustry_Register(Squirrel *engine)
{
	DefSQClass <AIIndustry> SQAIIndustry("AIIndustry");
	SQAIIndustry.PreRegister(engine);
	SQAIIndustry.AddConstructor<void (AIIndustry::*)(), 1>(engine, "x");

	SQAIIndustry.DefSQStaticMethod(engine, &AIIndustry::GetIndustryCount,                  "GetIndustryCount",                  1, ".");
	SQAIIndustry.DefSQStaticMethod(engine, &AIIndustry::IsValidIndustry,                   "IsValidIndustry",                   2, ".i");
	SQAIIndustry.DefSQStaticMethod(engine, &AIIndustry::GetIndustryID,                     "GetIndustryID",                     2, ".i");
	SQAIIndustry.DefSQStaticMethod(engine, &AIIndustry::GetName,                           "GetName",                           2, ".i");
	SQAIIndustry.DefSQStaticMethod(engine, &AIIndustry::IsCargoAccepted,                   "IsCargoAccepted",                   3, ".ii");
	SQAIIndustry.DefSQStaticMethod(engine, &AIIndustry::GetStockpiledCargo,                "GetStockpiledCargo",                3, ".ii");
	SQAIIndustry.DefSQStaticMethod(engine, &AIIndustry::GetLastMonthProduction,            "GetLastMonthProduction",            3, ".ii");
	SQAIIndustry.DefSQStaticMethod(engine, &AIIndustry::GetLastMonthTransported,           "GetLastMonthTransported",           3, ".ii");
	SQAIIndustry.DefSQStaticMethod(engine, &AIIndustry::GetLastMonthTransportedPercentage, "GetLastMonthTransportedPercentage", 3, ".ii");
	SQAIIndustry.DefSQStaticMethod(engine, &AIIndustry::GetLocation,                       "GetLocation",                       2, ".i");
	SQAIIndustry.DefSQStaticMethod(engine, &AIIndustry::GetAmountOfStationsAround,         "GetAmountOfStationsAround",         2, ".i");
	SQAIIndustry.DefSQStaticMethod(engine, &AIIndustry::GetDistanceManhattanToTile,        "GetDistanceManhattanToTile",        3, ".ii");
	SQAIIndustry.DefSQStaticMethod(engine, &AIIndustry::GetDistanceSquareToTile,           "GetDistanceSquareToTile",           3, ".ii");
	SQAIIndustry.DefSQStaticMethod(engine, &AIIndustry::IsBuiltOnWater,                    "IsBuiltOnWater",                    2, ".i");
	SQAIIndustry.DefSQStaticMethod(engine, &AIIndustry::HasHeliport,                       "HasHeliport",                       2, ".i");
	SQAIIndustry.DefSQStaticMethod(engine, &AIIndustry::GetHeliportLocation,               "GetHeliportLocation",               2, ".i");
	SQAIIndustry.DefSQStaticMethod(engine, &AIIndustry::HasDock,                           "HasDock",                           2, ".i");
	SQAIIndustry.DefSQStaticMethod(engine, &AIIndustry::GetDockLocation,                   "GetDockLocation",                   2, ".i");
	SQAIIndustry.DefSQStaticMethod(engine, &AIIndustry::GetIndustryType,                   "GetIndustryType",                   2, ".i");

	SQAIIndustry.PostRegister(engine);
}
